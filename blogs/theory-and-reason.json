{
    "title": "Architecture: Theory and Reason Behind Current Decisions of This Site",
    "body": "Hello! In this post, I want to describe how I put together this website at https://dragonjaye.com. I will tell my goals and thoughts along the way in this post. I hope you will gain some insight into my thinking and why I chose the path I did. This post is meant to lay down the theory and help carve a way for new developers looking to host a similar solution. This solution to display developers' portfolio sites is exceptionally beneficial and cost-effective. So let's dive into those reasons, and thank you for reading this content -- I hope it is informative and helps you.<br><br> I wanted my portfolio site hosted for free, so I chose GitHub and GitHub Pages to accomplish this first task. The second objective is to ensure I can keep adding to this site independent of the framework. Utilizing GH pages, I can create repositories that include the custom route I would like and whatever framework to get the page up. Since GitHub Pages require an index.html entry point, this is perfect for many front-end frameworks/libraries to exist within that file. My current applications utilize create-react-app since that was the first technology I started with in the initial build. The third objective is to iterate quickly without a lot of technical overhead. I chose to be as bare-bones as possible to start and utilize as many default web APIs as possible. This way, the surrounding structure of the logic and operations could trade easily with a different framework or library.<br><br> My portfolio site can be a simple website other than an uber-complex system to deliver information about my career or current activities. While I understand demonstrating the ability to build complex architecture, it is not beneficial to only make a website overly complicated for demonstration. Instead, I simplified a complex system to what was necessary to start. Then as time goes on and needs grow, I can continue to expand in a way that makes sense. There may come a time when I need to port over this build into something more complex for SEO or other reasons, but my main objective is to get content out into the wild.<br><br> The main point of objective three is not to code oneself into a corner. Preventing getting caught in a corner is done by eliminating strong code-coupling to the basics of what must happen on a per-component or app basis. If the app requires complex data fetching, that's an entirely different discussion. If the app's goal is to deliver information effectively while being able to be maintained without headache or worry, then simplicity goes a lot further. Simplicity isn't achievable through a lack of work or knowledge. Simplicity is possible by knowing and understanding the system you're building exceptionally well.<br><br> How do I define this system as simple? First, the repository setup is independent of each app. I can have many index.html files across many repositories as the rendered page. Each of these pages may contain some JS application or not. So repo-1 is stationed at `/about-me`, and repo-2 is stationed at `/blog`. So each repo gets a route, and each repo is an application. The main downside here is data transfer per application/route. Since each route is an independent app, one can not simply include redux or context and have it just work across the domain and subroutes. However, it is possible to have shared data; it is just optional for this website.<br><br> Secondly, since each repo/route is a single application, I can continue to expand and demonstrate multiple tools used to deliver an experience. If I went with NextJS, I would be stuck using NextJS until I decided to port/refactor my entire website away from it. I like that I could easily make a Svelte app and have a React app under the same domain. TLDR; I'm hosting several single-page apps, each with its routing system or links to each new route. Of course, there are many paths to do what I said above, but I'm using GitHub. The default functionality allows me to have this freedom inherently by design. That's pretty damn cool.<br><br> Third, if I continue to use the same base template I originally made, I can copy/paste over components from one repo to another. Eventually, I may want to create a component library to handle this; however, I only need to copy/paste components from one repo to another. That is a ton of time saved compared to writing a massive system to deliver a button or typography component with slight customizations on top of whatever component library I'm using, such as Material-UI. TLDR; I'm choosing a pragmatic approach because it requires less overhead work to get up and running. I can delay that overhead work until I need to expand into more complexity for more consistency across pages. There is a time and place for everything. If the business requires speed, it may be beneficial to launch fast and refactor while launched instead of building perfection out of the gate because the perfect perception is only perfect as long as everything stays the same, and one is never wrong about the future.<br><br> One can point out many issues from the decisions made here. However, I urge one who critiques to evaluate the importance of the proposed opposition. My main focuses are speed, portability, cost-effectiveness, ease of use, maintainability, and uniqueness. GH-Pages deployment systems are not my first choice for a long-term business endeavor. However, it is a great system to use as a portal to other applications or data sources or get up and rolling fast.<br><br> I hope this article on how this system comes together can benefit your journey. GitHub and GH-Pages make it easy to get your ideas onto the web without many headaches that may come with other deployment systems. Remember to continually test and try things to know what works and what doesn't; you may surprise yourself with an ingenious concept or two.",
    "author": "Aaron Krueger"
}